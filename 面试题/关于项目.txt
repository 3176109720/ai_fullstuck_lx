寒假商业远程实习
酒吧拼桌小程序，按照设计稿的需求，还原出来页面，并思考一些业务逻辑。
文件夹的路径规范，代码也规范。比如一个页面建一个文件夹。然后也有一些业务逻辑的思考，
比如from表单的提交，最外层得加一层from，然后按钮触发change事件。change事件自带参数values,
那就是要传递给后端的数据。然后是后台管理系统，后台管理系统就是用element-plus搭建起设计图上
的界面，并完成一些简单的功能，比如删除的提示，编辑的提示，以及表格表单的完成。

仿网易云项目。将可复用的组件进行封装。封装了头部组件，用插槽v-slot来解决吧该组件用在不同的页面上有差异的情况。
比如中间一个是搜索框，一个是我的音乐。封装了菜单的组件。用vuex来进行组件的展示和隐藏的状态管理，因为这个
组件不只是一个地方用，所以要做一个公共数据的状态管理。在createStore的state里面写一个isShowMenu为false
，在mutations里面写一个改变状态的函数，在组件当中触发。这样就完成了一个组件的封装。

封装接口请求
封装了baseURL，封装了相同的根路径，方便修改和维护。
用uni.request来进行接口请求。

如何实现登录验证
用uniapp的插件，用二维码扫码进行登录验证。


恋爱便签  
轻前端，尝试自己写后端
用elemen-plus来完成ui页面的设计。
二次封装axios来发送接口请求     比如配置了baseURL，便于维护。（axios.interceptors.response.use）设置了响应拦截来做统一的错误处理，根据后端
返回的状态码来返回错误的信息。

组件，简单的封装了一个goback组件，进行返回上一级。
用vue-router进行路由的跳转和传参。（path:路径  query：携带参数）


后端
用node的模块化koa框架来写接口。引入koa2-cors模块来解决跨域的问题。
引入mysql2来操作数据库（创建线程池，连接mysql，连接线程池，执行sql语句）
commonJS require引入     module.exports抛出。
封装操作数据库的方法。

所以其实我的项目是比较简单的，毕竟我只是一个实习生，但是要把所有的东西搞懂学精就不是一件简单的事情。
